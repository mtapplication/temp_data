{
    "story": [
        {
            "image": "https://www.pythonstudio.us/language-overview/images/6050_826567_featured_image-pyhton-conclusion.jpg",
            "title": "Python sum() Function",
            "des": "Add all items in a tuple, and return the result:\n\na = (1, 2, 3, 4, 5)\nx = sum(a)\n\nDefinition and Usage\nThe sum() function returns a number, the sum of all items in an iterable.\n\nSyntax\nsum(iterable, start)"
        },
        {
            "image": "https://www.pythonstudio.us/language-overview/images/6050_826567_featured_image-pyhton-conclusion.jpg",
            "title": "Python If ... Else",
            "des": "Python Conditions and If statements\n\nPython supports the usual logical conditions from mathematics:\n\nEquals: a == b\nNot Equals: a != b\nLess than: a < b\nLess than or equal to: a <= b\nGreater than: a > b\nGreater than or equal to: a >= b\nThese conditions can be used in several ways, most commonly in if statements and loops.\nAn if statement is written by using the if keyword."
        },
        {
            "image": "https://www.pythonstudio.us/language-overview/images/6050_826567_featured_image-pyhton-conclusion.jpg",
            "title": "Python While Loops",
            "des": "Python Loops\n\nPython has two primitive loop commands:\nwhile loops\nfor loops\n\nThe while Loop\nWith the while loop we can execute a set of statements as long as a condition is true."
        },
        {
            "image": "https://www.pythonstudio.us/language-overview/images/6050_826567_featured_image-pyhton-conclusion.jpg",
            "title": "Python For Loops",
            "des": "Python For Loops\nA for loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).\nThis is less like the for keyword in other programming languages, and works more like an iterator method as found in other object-orientated programming languages.\nWith the for loop we can execute a set of statements, once for each item in a list, tuple, set etc."
        },
        {
            "image": "https://www.pythonstudio.us/language-overview/images/6050_826567_featured_image-pyhton-conclusion.jpg",
            "title": "Python Functions",
            "des": "A function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\n\nCreating a Function\nIn Python a function is defined using the def keyword.\n\nCalling a Function\nTo call a function, use the function name followed by parenthesis."
        },
        {
            "image": "https://www.pythonstudio.us/language-overview/images/6050_826567_featured_image-pyhton-conclusion.jpg",
            "title": "Python Lambda",
            "des": "A lambda function is a small anonymous function.\nA lambda function can take any number of arguments, but can only have one expression.\n\nSyntax\nlambda arguments : expression\nThe expression is executed and the result is returned.\nLambda functions can take any number of arguments."
        },
        {
            "image": "https://www.pythonstudio.us/language-overview/images/6050_826567_featured_image-pyhton-conclusion.jpg",
            "title": "Python Classes and Objects",
            "des": "Python Classes/Objects\nPython is an object oriented programming language.\nAlmost everything in Python is an object, with its properties and methods.\nA Class is like an object constructor, or a blueprint for creating objects.\n\nCreate a Class\nTo create a class, use the keyword class:"
        }
    ]
}
